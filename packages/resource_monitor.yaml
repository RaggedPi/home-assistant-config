################################################################
## Ragged Jack Farm                                           ##
## Package: Amazon FireTv 4k                                  ##
## Author: David Durost <david.durost@gmail.com>              ##
## Url: http://ragedjackfarm.net                              ##
################################################################

###########
# Sensors #
###########
sensor:
  # System Information #
  - platform: systemmonitor
    resources:
      - type: disk_free
        arg: /
      - type: disk_use_percent
        arg: /
      - type: swap_use_percent
      - type: memory_free
      - type: memory_use_percent
      - type: processor_use
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: last_boot
  - platform: dnsip
    ipv6: true
  # CPU Temp
  - platform: command_line
    name: CPU Temp
#    command: "cat /sys/class/thermal/thermal_zone2/temp"
    command: "cat /sys/devices/virtual/thermal/cooling_device0" # while in VM testing
    unit_of_measurement: "Â°C"
    value_template: '{{ value | multiply(0.001) | round(0) }}' 
  # Uptime
  - platform: uptime
  # Rpi_Power
  - platform: rpi_power
    text_state: True
  # Hass.io Version
  - platform: version
    name: Installed Version
    source: local
  # Latest Available HA Version
  - platform: version
    name: Latest Available Version
    beta: false
    image: raspberrypi4
    source: hassio
  # Templates
  - platform: template
    sensors:
      # Home Assistant Uptime
      ha_uptime:
        friendly_name: HA Uptime
        value_template: >
          {% if states('sensor.uptime') == '0.0' %} 
            Just restarted...
          {% else %}
            {% macro phrase(value, name) %}
            {%- set value = value | int %}
            {%- set end = 's' if value > 1 else '' %}
            {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
            {%- endmacro %}
            
            {% set weeks = (states('sensor.uptime') | int / 7) | int %}
            {% set days = (states('sensor.uptime') | int) - (weeks * 7) %}
            {% set hours = (states('sensor.uptime') | float - states('sensor.uptime') | int) * 24 %}
            {% set minutes = (hours - hours | int) * 60 %}

            {{ [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') }}
          {% endif %}
      # Raspberry Pi last boot date and time
      last_boot_date_time:
        friendly_name: Last Boot
        value_template: >
          {% set date = as_timestamp(states('sensor.last_boot')) | timestamp_custom('%d') %}
          {% set date = '{:01}'.format(date | int) %}
          {% if date in ('1', '21', '31') %}
            {% set date = date ~ 'st' %}
          {% elif date in ('2', '22') %}
            {% set date = date ~ 'nd' %}
          {% elif date in ('3', '23') %}
            {% set date = date ~ 'rd' %}
          {% else %}
            {% set date = date ~ 'th' %}
          {% endif %}

          {{ as_timestamp(states('sensor.last_boot')) | timestamp_custom('%H:%M on %a') }} {{ date }} {{ as_timestamp(states('sensor.last_boot')) | timestamp_custom('%b %Y') }}
      # Raspberry Pi Up Time
      rpi_uptime:
        friendly_name: RPi Uptime
        entity_id: sensor.time
        value_template: >
          {% set up_time = as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}

          {% set minutes = (up_time // 60) | int %}
          {% set hours = (minutes // 60) %}
          {% set days = (hours // 24) %}
          {% set weeks = (days // 7) %}

          {% set minutes = (minutes % 60) %}
          {% set hours =  (hours % 24) %}
          {% set days = (days % 7) %}

          {% macro phrase(value, name) %}
                    {%- set value = value %}
                    {%- set end = 's' if value > 1 else '' %}
                    {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
          {%- endmacro %}
                    
          {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
          {% set last_comma = text.rfind(',') %}
          {% if last_comma != -1 %}
            {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
          {% endif %}
          
          {{ text }}
      ####################
      # Component Counts #
      ####################
      # Count Automations
      count_automations:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['automation'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Count Scripts
      count_scripts:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['script'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Count Device Trackers
      count_device_trackers:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['device_tracker'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}        
    # Count Binary Sensors
      count_binary_sensors:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['binary_sensor'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Count Sensors
      count_sensors:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['sensor'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Count Switches
      count_switches:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['switch'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Count Zones
      count_zones:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['zone'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Input Booleans
      count_input_booleans:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['input_boolean'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Input Numbers
      count_input_numbers:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['input_number'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length|int}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Input Texts
      count_input_texts:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['input_text'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Input Selects
      count_input_selects:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['input_select'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}
    # Input Date Times
      count_input_datetimes:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['input_datetime'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}

##############
# Automation #
##############
automation:
  # Low Disk Space
  - alias: HAPi Low Disk Space Alert
    trigger:
      - platform: numeric_state
        entity_id: sensor.disk_use_percent
        above: 90
    action:
      - service: notify.david
        data: 
          title: "HAPi Low Resource Alert"
          message: "[RaggedPi] Low Disk Space > 90% Used"
  # Low Memory
  - alias: HAPi Low Memory Alert
    trigger:
      - platform: numeric_state
        entity_id: sensor.memory_use_percent
        above: 90
    action:
      - service: notify.david
        data: 
          title: "HAPi Low Resource Alert"
          message: "[RaggedPi] Low Memory > 90% Used"
  # High Load
  - alias: HAPi High Load Alert
    trigger:
      - platform: numeric_state
        entity_id: sensor.load_5m
        above: 2.8 # 4 Cores in RPi3 x 0.7 per core, for relatively high sustained load = 
    action:
      - service: notify.david
        data: 
          title: "HAPi Low Resource Alert"
          message: "[RaggedPi] System Load 5m Load Average > 2.8"
  # rpi Power
  - id: rpi_power_issue
    alias: Power Problem Notification
    trigger:
    - platform: numeric_state
      entity_id: sensor.rpi_power_status
      value_template: '{{ state.attributes.value }}'
      above: 0
      for:
        minutes: 5
    condition:
    action:
    - service: persistent_notification.create
      data_template:
        message: "RPI Power reported {{ states.sensor.rpi_power_status.state }}. The state had changed from {{ trigger.from_state.state }} "
        title: Power Supply Issue
    - service: notify.notify
      data_template:
        message: "RPI Power reported {{ states.sensor.rpi_power_status.state }}. The state had  changed from {{ trigger.from_state.state }}"
        title: Power Supply Issue

############
# Recorder #
############
recorder:
  include:
    entities:
      - sensor.disk_use_percent
      - sensor.memory_use_percent

###########
# History #
###########
history:
  include:
    entities:
      - sensor.disk_use_percent
      - sensor.memory_use_percent
